
[
  {
    "title": "Tất Tần Tật về React Hooks",
    "slug": "tat-tan-tat-ve-react-hooks",
    "category": "FRONT END",
    "content": "## Giới thiệu về React Hooks\n\nReact Hooks là một tính năng mới được giới thiệu trong React 16.8. Chúng cho phép bạn sử dụng state và các tính năng khác của React mà không cần viết class. Hooks là các hàm cho phép bạn “kết nối” vào state và vòng đời của React từ các function component.\n\n### Tại sao lại dùng Hooks?\n\n*   **Tái sử dụng logic có state dễ dàng hơn:** Trước đây, các mẫu như render props và higher-order components cố gắng giải quyết vấn đề này, nhưng chúng thường yêu cầu bạn phải tái cấu trúc các component của mình và có thể dẫn đến “wrapper hell”.\n*   **Component phức tạp trở nên khó hiểu:** Các class component có thể trở nên rất lớn và khó theo dõi. Logic thường bị phân tán qua nhiều phương thức vòng đời (ví dụ: `componentDidMount`, `componentDidUpdate`).\n*   **Class gây bối rối cho cả người và máy:** Cú pháp class, `this`, binding... là những rào cản lớn cho người mới học.\n\n![React Logo](https://placehold.co/800x400.png)\n*Hình ảnh minh họa cho React*\n\n### Các Hooks cơ bản\n\n1.  **`useState`**: Cho phép bạn thêm state vào function component.\n2.  **`useEffect`**: Cho phép bạn thực hiện các side effect trong function component. Nó tương đương với `componentDidMount`, `componentDidUpdate`, và `componentWillUnmount`.\n\n### Video Hướng dẫn\n\nCùng xem video dưới đây để hiểu rõ hơn về cách hoạt động của `useState` và `useEffect`.\n\n<div class=\"aspect-w-16 aspect-h-9 my-6\">\n  <iframe src=\"https://www.youtube.com/embed/gnhb2o2o5-k\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen class=\"w-full h-full rounded-lg shadow-lg\"></iframe>\n</div>\n\n## Kết luận\n\nReact Hooks đã cách mạng hóa cách chúng ta viết các component React, giúp code trở nên ngắn gọn, dễ đọc và dễ bảo trì hơn. Hãy bắt đầu sử dụng chúng trong dự án tiếp theo của bạn!"
  },
  {
    "title": "Xây Dựng RESTful API với Node.js và Express",
    "slug": "xay-dung-restful-api-voi-nodejs-va-express",
    "category": "BACK END",
    "content": "## Giới thiệu\n\nTrong bài viết này, chúng ta sẽ cùng nhau xây dựng một RESTful API đơn giản sử dụng Node.js và framework Express. Đây là một trong những kỹ năng nền tảng và quan trọng nhất đối với bất kỳ lập trình viên backend nào.\n\n### Chuẩn bị\n\n*   Cài đặt Node.js và npm.\n*   Kiến thức cơ bản về JavaScript.\n*   Một trình soạn thảo code như VS Code.\n\n### Bắt đầu\n\nĐầu tiên, hãy tạo một thư mục mới cho dự án và khởi tạo một dự án Node.js:\n\n```bash\nnpm init -y\nnpm install express\n```\n\nSau đó, tạo file `index.js` và viết đoạn code server đầu tiên:\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\napp.listen(port, () => {\n  console.log(`Example app listening on port ${port}`);\n});\n```\n\n![ExpressJS Logo](https://placehold.co/800x300.png)\n\nChạy server bằng lệnh `node index.js` và bạn sẽ thấy thông báo \"Hello World!\" khi truy cập `http://localhost:3000`."
  },
  {
    "title": "Giới thiệu về Genkit và Google AI",
    "slug": "gioi-thieu-ve-genkit-va-google-ai",
    "category": "AI",
    "content": "## Genkit là gì?\n\nGenkit là một framework mã nguồn mở được thiết kế để giúp các nhà phát triển xây dựng các ứng dụng AI sản xuất sẵn sàng một cách nhanh chóng và dễ dàng. Nó cung cấp các công cụ và cấu trúc để bạn có thể tập trung vào việc xây dựng luồng logic AI thay vì các phần phụ trợ phức tạp.\n\n### Các tính năng chính\n\n*   **Flows:** Giúp bạn sắp xếp các lệnh gọi đến mô hình AI, xử lý dữ liệu và các logic nghiệp vụ khác.\n*   **Prompts:** Cung cấp một cách có cấu trúc để định nghĩa và quản lý các prompt của bạn.\n*   **Model-as-tools:** Cho phép các mô hình AI gọi lại các hàm trong code của bạn, mở ra khả năng xây dựng các agent thông minh.\n\n![AI Brain](https://placehold.co/700x400.png)\n\n### Tích hợp với Google AI\n\nGenkit tích hợp liền mạch với các mô hình của Google AI như Gemini. Bạn có thể dễ dàng gọi các mô hình này để tạo văn bản, phân tích hình ảnh và nhiều hơn nữa.\n\nCùng xem video giới thiệu về Gemini 1.5 Pro:\n\n<div class=\"aspect-w-16 aspect-h-9 my-6\">\n  <iframe src=\"https://www.youtube.com/embed/K4pX1VAxaAI\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen class=\"w-full h-full rounded-lg shadow-lg\"></iframe>\n</div>"
  },
  {
    "title": "Hướng dẫn Docker cho người mới bắt đầu",
    "slug": "huong-dan-docker-cho-nguoi-moi-bat-dau",
    "category": "DEVOPS",
    "content": "## Docker là gì?\n\nDocker là một nền tảng mở để phát triển, vận chuyển và chạy các ứng dụng. Docker cho phép bạn tách biệt ứng dụng của mình khỏi cơ sở hạ tầng để bạn có thể cung cấp phần mềm một cách nhanh chóng.\n\n![Docker Logo](https://placehold.co/800x350.png)\n\nVới Docker, bạn có thể quản lý cơ sở hạ tầng của mình theo cách tương tự như bạn quản lý ứng dụng. Bằng cách tận dụng các phương pháp của Docker để vận chuyển, kiểm thử và triển khai code một cách nhanh chóng, bạn có thể giảm đáng kể độ trễ giữa việc viết code và chạy nó trong môi trường sản xuất."
  },
  {
    "title": "Dự án cá nhân: Xây dựng Portfolio Website",
    "slug": "du-an-ca-nhan-xay-dung-portfolio-website",
    "category": "SHOWCASE",
    "content": "## Giới thiệu dự án\n\nĐây chính là trang web bạn đang xem! Một dự án portfolio cá nhân được xây dựng từ đầu bằng Next.js, TypeScript và Tailwind CSS. Mục tiêu của dự án là tạo ra một không gian trực tuyến để trưng bày các kỹ năng, kinh nghiệm và các dự án đã thực hiện.\n\n![Project Screenshot](https://placehold.co/800x450.png)\n\n### Công nghệ sử dụng\n\n*   **Framework:** Next.js (App Router)\n*   **Ngôn ngữ:** TypeScript\n*   **Styling:** Tailwind CSS & ShadCN/UI\n*   **AI:** Google AI & Genkit\n*   **Deployment:** Firebase App Hosting\n\nĐây là một ví dụ tuyệt vời về cách kết hợp các công nghệ hiện đại để xây dựng một ứng dụng web nhanh, đẹp và có khả năng mở rộng."
  },
  {
    "title": "Git Cheatsheet - Các lệnh thường dùng",
    "slug": "git-cheatsheet-cac-lenh-thuong-dung",
    "category": "CHEATSHEET",
    "content": "## Các lệnh Git bạn phải biết\n\nĐây là danh sách các lệnh Git phổ biến nhất mà mọi lập trình viên đều nên biết.\n\n### Khởi tạo & Sao chép\n```bash\n# Khởi tạo một kho lưu trữ mới\ngit init\n\n# Sao chép một kho lưu trữ từ xa\ngit clone [url]\n```\n\n### Staging & Commit\n```bash\n# Thêm một file vào khu vực staging\ngit add [file]\n\n# Thêm tất cả các file đã thay đổi\ngit add .\n\n# Ghi lại các thay đổi vào kho lưu trữ\ngit commit -m \"Commit message\"\n```\n\n### Đồng bộ hóa\n```bash\n# Đẩy các thay đổi lên kho lưu trữ từ xa\ngit push origin [branch]\n\n# Kéo các thay đổi từ kho lưu trữ từ xa\ngit pull\n```\n![Git Graphic](https://placehold.co/600x300.png)"
  }
]

    